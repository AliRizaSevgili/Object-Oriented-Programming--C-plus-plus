1. Function templates help in generic programming

	#include <iostream>
	using namespace std;

	template<typename T>
	T sum(T x, T y)	
	{
		return x + y;
	}

	int main()
	{
		double x = 5.2, y = 7.4;
		cout << "Sum: " << sum<double>(x, y) << endl;
		return 0;
	}

2. In most of the cases, compilers can infer the data type of function templates automatically.

	#include <iostream>
	using namespace std;

	template<typename T>
	T sum(T x, T y)
	{
		return x + y;
	}

	int main()
	{
		double x = 5.2, y = 7.4;
		cout << "Sum: " << sum(x, y) << endl;
		return 0;
	}

3. Function templates can accommodate different data types by using multiple datatypes in the definition of the template

	#include <iostream>
	using namespace std;

	template<typename T, typename U>
	T sum(T x, U y)
	{
		return x + y;
	}

	int main()
	{
		double x = 5.2;
		int y = 7;
		cout << "Sum: " << sum(x, y) << endl;
		return 0;
	}

4. Class templates help in writing classes for multiple data types


	#include <iostream>
	using namespace std;

	class X
	{
	private:
		int x;
	public:
		X()
		{
			x = 0;
		}
		X(int x)
		{
			this->x = x;
		}
		int getX()
		{
			return this->x;
		}
	};

	class Y
	{
	private:	
		int y;
	public:
		Y()
		{
			y = 0;
		}
		Y(int y)
		{
			this->y = y;
		}
		int getY()
		{
			return this->y;
		}
	};

	double sum(X obj1, Y obj2)
	{
		return obj1.getX() + obj2.getY();
	}
	
	int main()
	{
		X obj1 = X(5);
		Y obj2 = Y(7);
		cout << "X + Y = " << sum(obj1, obj2) << endl;

		X obj3 = X(5.6);
		Y obj4 = Y(7.8);
		cout << "X + Y = " << sum(obj3, obj4) << endl;
		return 0;
	}

	Above problem can be solved using templates

	#include <iostream>
	using namespace std;

	template <class T>
	class X
	{
	private:
		T x;
	public:
		X()
		{
			x = 0;
		}
		X(T x)
		{
			this->x = x;
		}
		T getX()
		{
			return this->x;
		}
	};

	template <class T>
	class Y
	{
	private:
		T y;
	public:
		Y()
		{
			y = 0;
		}
		Y(T y)
		{
			this->y = y;
		}
		T getY()
		{
			return this->y;
		}
	};	

	int sum(X<int> obj1, Y<int> obj2)
	{
		return obj1.getX() + obj2.getY();
	}
	double sum(X<double> obj1, Y<double> obj2)
	{
		return obj1.getX() + obj2.getY();
	}

	int main()
	{
		X<int> obj1 = X<int>(5);
		Y<int> obj2 = Y<int>(7);
		cout << "X + Y = " << sum(obj1, obj2) << endl;
	
		X<double> obj3 = X<double>(5.6);
		Y<double> obj4 = Y<double>(7.8);
		cout << "X + Y = " << sum(obj3, obj4) << endl;
		return 0;
	}

5. Creating a vector class with and without templates

	Without templates

	#include <iostream>
	using namespace std;

	class Vector
	{
	private:
		int* numbers;
		int size;
	public:
	
		Vector(int size)
		{
			this->size = size;
			this->numbers = new int[size];
		}
		void addElements()
		{
			cout << "Enter " << size << " elements..." << endl;

			for (int i = 0; i < size; i++)
			{
				cout << "numbers[" << i<<"] = ";
				cin >> numbers[i];
			}
		}
		int sumElements()
		{	
			int sum = 0;
			for (int i = 0; i < size; i++)
			{
				sum += numbers[i];
			}
			return sum;
		}
	};

	int main()
	{
		Vector v1(5);
		v1.addElements();
		cout << "Sum: " << v1.sumElements();
		return 0;
	}

	With templates

	#include <iostream>
	using namespace std;

	template<class T>
	class Vector
	{
	private:
		T* numbers;
		int size;
	public:
	
		Vector(int size)
		{
			this->size = size;
			this->numbers = new T[size];
		}
		void addElements()
		{
			cout << "Enter " << size << " elements..." << endl;
	
			for (int i = 0; i < size; i++)
			{
				cout << "numbers[" << i<<"] = ";
				cin >> numbers[i];
			}
		}
		T sumElements()
		{
			T sum = 0;
			for (int i = 0; i < size; i++)
			{
				sum += numbers[i];
			}
			return sum;
		}
	};

	int main()
	{
		Vector<float> v1(5);
		v1.addElements();
		cout << "Sum: " << v1.sumElements();

		return 0;
	}


6. C++ has a built-in vector class as well which is pretty handy

	#include <iostream>
	#include <vector>
	using namespace std;

	int main()
	{
		vector<double> v;
		double number;
		while (true)
		{
			cout << "Enter a number: ";
			cin >> number;

			if (number < 0)
			{
				break;
			}
			v.push_back(number);
		}

		for (int i = 0; i < v.size(); i++)
		{
			cout << v.at(i) << endl;
		}
		return 0;
	}

7. Casting can be done in C++

	#include <iostream>
	using namespace std;

	int main()
	{
		int number;
		double result;

		cout << "Enter a number: ";
		cin >> number;

		result = static_cast<double>(number) / 3;

		cout << "Result: " << result;
	}