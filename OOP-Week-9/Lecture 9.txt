1. Polymorphism is a concept where a parent can take a form of its children

	#include <iostream>

	using namespace std;


	class Vehicle
	{
	protected:
		int kms = 0;
	public:
	
		void drive()
		{
			cout << "I can drive" << endl;
		}
		void engineStart()
		{
			cout << "Engine started" << endl;
		}
		void engineStop()
		{
			cout << "Engine Stopped" << endl;
		}
		void setKMs(int kms)
		{
			this->kms = kms;
		}
	};
	
	class Car: public Vehicle
	{
	public:
	
		void goToPicnic()
		{
			cout << "Going to Picnic" << endl;
		}
		void showKMs()
		{
			cout << "I am a Car and I drove: " << kms << " kms" << endl;
		}
	};

	class Truck: public Vehicle
	{
	public:
	
		void carryGoods()
		{
			cout << "Carrying Goods" << endl;
		}
		void showKMs()
		{
			cout << "I am a Truck and I drove: " << kms << " kms" << endl;
		}
	};

	int main()
	{
		Car car;
		Truck truck;

		Vehicle* vehicle = &car;
		vehicle->setKMs(2000);
	
		car.showKMs();
		truck.showKMs();
		return 0;
	}


2. Parent pointer can hold the address of child objects even inside the functions

#include <iostream>
using namespace std;

class Vehicle
{
protected:
	string name;
	int kms = 0;
public:
	void drive()
	{
		cout << "I can drive" << endl;
	}
	void setValues(string name, int kms)
	{
		this->name = name;
		this->kms = kms;
	}
	void display()
	{
		cout << "Name: " << this->name << endl;
		cout << "KMs: " << this->kms << endl;
	}
};

class Car : public Vehicle
{
public:
	void goToPicnic()
	{
		cout << "Going to Picnic" << endl;
	}
};

class Truck : public Vehicle
{
public:
	void carryGoods()
	{
		cout << "Carrying Goods" << endl;
	}

};

void show(Vehicle& vehicle)
{
	vehicle.display();
}
int main()
{
	Vehicle vehicle;
	Car car;
	Truck truck;

	vehicle.setValues("General Vehicle", 1234);
	car.setValues("Toyota RAV4", 567);
	truck.setValues("Hino", 9000);

	show(vehicle);
	show(car);
	show(truck);

	return 0;
}

3. Virtual functions are used to make calls to the child's overridden function

	Lets assume I have the following code:

	#include <iostream>
using namespace std;

class Vehicle
{
protected:
	string name;
	int kms = 0;
public:
	void drive()
	{
		cout << "I can drive" << endl;
	}
	void setValues(string name, int kms)
	{
		this->name = name;
		this->kms = kms;
	}
	void display()
	{
		cout << "Name: " << this->name << endl;
		cout << "KMs: " << this->kms << endl;
	}
};

class Car : public Vehicle
{
private:
	string color = "Red";
public:
	void goToPicnic()
	{
		cout << "Going to Picnic" << endl;
	}
	void setColor(string color)
	{
		this->color = color;
	}
	void display()
	{
		cout << "Color: " << color << endl;
	}
};

class Truck : public Vehicle
{
private:
	int capacity = 0;
public:
	void carryGoods()
	{
		cout << "Carrying Goods" << endl;
	}
	void setCapacity(int capacity)
	{
		this->capacity = capacity;
	}
	void display()
	{
		cout << "Capacity: " << capacity << endl;
	}
};

void show(Vehicle& vehicle)
{
	vehicle.display();
}
int main()
{
	Vehicle vehicle;
	Car car;
	Truck truck;

	vehicle.setValues("General Vehicle", 1234);
	car.setValues("Toyota RAV4", 567);
	car.setColor("Blue");
	truck.setValues("Hino", 9000);
	truck.setCapacity(1000);

	show(vehicle);
	show(car);
	show(truck);

	return 0;
}

	Problem in above code is, it will always call the display method of parent class which is not he requirement in this example. How can I tell my compiler to call child's overriden method? I can do that using virtual functions.

	#include <iostream>
using namespace std;

class Vehicle
{
protected:
	string name;
	int kms = 0;
public:
	void drive()
	{
		cout << "I can drive" << endl;
	}
	void setValues(string name, int kms)
	{
		this->name = name;
		this->kms = kms;
	}
	virtual void display()
	{
		cout << "Name: " << this->name << endl;
		cout << "KMs: " << this->kms << endl;
	}
};

class Car : public Vehicle
{
private:
	string color = "Red";
public:
	void goToPicnic()
	{
		cout << "Going to Picnic" << endl;
	}
	void setColor(string color)
	{
		this->color = color;
	}
	void display()
	{
		Vehicle::display();
		cout << "Color: " << color << endl;
	}
};

class Truck : public Vehicle
{
private:
	int capacity = 0;
public:
	void carryGoods()
	{
		cout << "Carrying Goods" << endl;
	}
	void setCapacity(int capacity)
	{
		this->capacity = capacity;
	}
	void display()
	{
		Vehicle::display();
		cout << "Capacity: " << capacity << endl;
	}
};

void show(Vehicle& vehicle)
{
	vehicle.display();
}
int main()
{
	Vehicle vehicle;
	Car car;
	Truck truck;

	vehicle.setValues("General Vehicle", 1234);
	car.setValues("Toyota RAV4", 567);
	car.setColor("Blue");
	truck.setValues("Hino", 9000);
	truck.setCapacity(1000);

	show(vehicle);
	show(car);
	show(truck);

	return 0;
}

4. Abstract classes are the classes from which you never intend to instantiate any objects.

	The code below will produce an error since abstract class requires all of its virtual functions to be implemented in child classes

	#include <iostream>
	using namespace std;

	class Vehicle
	{
	public:
		virtual void drive() = 0
		{
			cout << "Vehicle can drive" << endl;
		}
	};

	class Car : public Vehicle
	{
	public:	
		void goToPicnic()
		{
			cout << "Going to Picnic" << endl;
		}
		void drive()
		{
			cout << "Car can drive" << endl;
		}
	};

	class Truck : public Vehicle
	{
	public:	
		void carryGoods()
		{
			cout << "Carrying Goods" << endl;
		}
	
	};
	int main()
	{
		Car car;
		Truck truck;

		Vehicle* vehicle[2];
		vehicle[0] = &car;
		vehicle[1] = &truck;

		vehicle[0]->drive();
		vehicle[1]->drive();

		return 0;
	}

5. Abstract Classes can be non-virtual or non-pure-virtual functions

	class Vehicle
	{
	public:
		virtual void drive() = 0
		{
			cout << "Vehicle can drive" << endl;
		}
		void startEngine()
		{
			cout << "Engine started" << endl;
		}
	};

	int main()
	{
		Car car;
		Truck truck;

		Vehicle* vehicle[2];
		vehicle[0] = &car;
		vehicle[1] = &truck;
	
		vehicle[0]->drive();
		vehicle[1]->drive();

		// This is valid
		vehicle[0]->startEngine();
		
		return 0;
	}
	